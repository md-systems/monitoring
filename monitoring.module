<?php
/**
 * @file
 * Monitoring bootstrap file.
 */

use Drupal\Component\Utility\String;
use Drupal\Core\Config\Config;
use Drupal\Core\Config\FileStorage;
use Drupal\Core\Extension\Extension;
use Drupal\Core\Template\Attribute;
use Drupal\monitoring\Entity\SensorInfo;
use Drupal\monitoring\Result\SensorResultInterface;
use Drupal\node\NodeTypeInterface;

/**
 * Returns an instance of the sensor manager.
 *
 * @return \Drupal\monitoring\Sensor\SensorManager
 *   The sensor manager.
 */
function monitoring_sensor_manager() {
  return \Drupal::service('monitoring.sensor_manager');
}

/**
 * Returns monitoring sensor info.
 *
 * @return \Drupal\monitoring\Entity\SensorInfo[]
 *   List of SensorInfo instances.
 *
 * @throws \Drupal\monitoring\Sensor\NonExistingSensorException
 *   In case a sensor name is provided, which does not exists.
 *
 * @see \Drupal\monitoring\Sensor\SensorManager
 */
function monitoring_sensor_info() {
  return monitoring_sensor_manager()->getSensorInfo();
}

/**
 * Gets sensor info grouped by categories.
 *
 * @param bool $enabled
 *   Sensor isEnabled flag.
 *
 * @return \Drupal\monitoring\Entity\SensorInfo[]
 *   Sensor info.
 */
function monitoring_sensor_info_by_categories($enabled = TRUE) {
  return monitoring_sensor_manager()->getSensorInfoByCategories($enabled);
}

/**
 * The sensor runner function.
 *
 * Note that in case there is a cached result for given sensor name, the sensor
 * will not run and the cached result will be returned.
 *
 * @param string $sensor_name
 *   The name of the sensor that is to be run.
 * @param bool $force_run
 *   Set to TRUE to force the run. Defaults to FALSE.
 * @param bool $verbose
 *   (optional) Set to TRUE to enable verbose execution, defaults to FALSE.
 *
 * @return SensorResultInterface
 *   A single result object.
 *
 * @throws \Drupal\monitoring\Sensor\NonExistingSensorException
 *   Thrown if the requested sensor does not exist.
 * @throws \Drupal\monitoring\Sensor\DisabledSensorException
 *   Thrown if any of the passed sensor names is not enabled.
 */
function monitoring_sensor_run($sensor_name, $force_run = FALSE, $verbose = FALSE) {
  $results = monitoring_sensor_run_multiple(array($sensor_name), $force_run, $verbose);
  return reset($results);
}

/**
 * Runs sensors.
 *
 * @param array $sensor_names
 *   Sensor names to run.
 * @param bool $force_run
 *   Flag to force run.
 * @param bool $verbose
 *   (optional) Set to TRUE to enable verbose execution, defaults to FALSE.
 *
 * @return \Drupal\monitoring\Result\SensorResultInterface[]
 *   List of result objects.
 *
 * @throws \Drupal\monitoring\Sensor\NonExistingSensorException
 *   Thrown if the requested sensor does not exist.
 * @throws \Drupal\monitoring\Sensor\DisabledSensorException
 *   Thrown if any of the passed sensor names is not enabled.
 *
 * @see \Drupal\monitoring\Sensor\SensorManager
 * @see \Drupal\monitoring\SensorRunner
 */
function monitoring_sensor_run_multiple($sensor_names = array(), $force_run = FALSE, $verbose = FALSE) {
  $sensors_info = array();
  if (empty($sensor_names)) {
    foreach (monitoring_sensor_manager()->getEnabledSensorInfo() as $sensor_name => $sensor_info) {
      $sensors_info[$sensor_name] = $sensor_info;
    }
  }
  else {
    foreach ($sensor_names as $sensor_name) {
      $sensors_info[$sensor_name] = monitoring_sensor_manager()->getSensorInfoByName($sensor_name);
    }
  }

  /** @var \Drupal\Monitoring\SensorRunner $runner */
  $runner = \Drupal::service('monitoring.sensor_runner');
  $results = $runner->runSensors($sensors_info, $force_run, $verbose);
  return $results;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Display a view as a table style.
 *
 * @todo - this needs review.
 *    Is it the right way how to inject custom css classes?
 */
function monitoring_preprocess_views_view_table(&$vars) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $vars['view'];
  // We want to alter only the monitoring sensor results view.
  // @todo - really?? we do not have the view machine name available here?
  if (!in_array('monitoring_sensor_results', $view->getBaseTables())) {
    return;
  }

  foreach ($vars['rows'] as $num => $row) {
    if (isset($vars['result'][$num]->monitoring_sensor_result_sensor_status)) {
      $vars['rows'][$num]['attributes'] = new Attribute(array(
        'class' => 'monitoring-' . strtolower($vars['result'][$num]->monitoring_sensor_result_sensor_status),
      ));
    }
  }

  _drupal_add_css(drupal_get_path('module', 'monitoring') . '/monitoring.css');
}

/**
 * Sensor pages title callback.
 *
 * @param string $action
 *   View/page action.
 * @param \Drupal\monitoring\Entity\SensorInfo $sensor_info
 *   Sensor info.
 *
 * @return string
 *   Title.
 */
function monitoring_sensor_action_title($action, SensorInfo $sensor_info) {
  $placeholders = array('@category' => $sensor_info->getCategory(), '@label' => $sensor_info->getLabel());
  switch ($action) {
    case 'log':
      return t('@label (@category)', $placeholders);
  }

  return '';
}

/**
 * Implements hook_permission().
 */
function monitoring_permission() {
  return array(
    'administer monitoring' => array(
      'title' => t('Administer monitoring'),
    ),
    'monitoring reports' => array(
      'title' => t('View monitoring reports'),
    ),
    'monitoring verbose' => array(
      'title' => t('Display verbose monitoring sensor info'),
    ),
    'monitoring force run' => array(
      'title' => t('Force run monitoring sensor execution'),
    ),
  );
}

/**
 * Saves sensor settings.
 *
 * @param string $sensor_name
 *   Sensor name.
 * @param array $values
 *   Settings to be saved.
 */
function monitoring_sensor_settings_save($sensor_name, $values) {
  \Drupal::config('monitoring.settings')->set($sensor_name, $values)->save();
  // After settings save reset the cache.
  monitoring_sensor_manager()->resetCache();
  // Changed settings might affect the sensor result.
  \Drupal::service('monitoring.sensor_runner')->resetCache(array($sensor_name));
}

/**
 * Gets sensor settings.
 *
 * @param string $sensor_name
 *   Sensor name.
 *
 * @return array
 *   Sensor saved settings.
 */
function monitoring_sensor_settings_get($sensor_name) {
  return (array)\Drupal::config('monitoring.settings')->get($sensor_name);
}

/**
 * Saves the sensor result.
 *
 * @param SensorResultInterface $result
 *   Sensor call result.
 *
 * @return \Drupal\monitoring\Entity\SensorResultEntity
 *   Sensor result entity.
 */
function monitoring_sensor_result_save(SensorResultInterface $result) {
  $values = array(
    'sensor_name' => $result->getSensorName(),
    'sensor_status' => $result->getStatus(),
    'sensor_message' => $result->getMessage(),
    'sensor_value' => $result->getValue(),
    'timestamp' => $result->getTimestamp(),
    'execution_time' => $result->getExecutionTime(),
  );
  $result_entity = entity_create('monitoring_sensor_result', $values);
  $result_entity->save();
  return $result_entity;
}

/**
 * Gets last sensor result.
 *
 * @param string $sensor_name
 *   The name of the sensor.
 *
 * @return \Drupal\monitoring\Entity\SensorResultEntity|null
 *   A SensorResultEntity representing the last sensor result.
 */
function monitoring_sensor_result_last($sensor_name) {
  $result = \Drupal::entityQuery('monitoring_sensor_result')
    ->condition('sensor_name', $sensor_name)
    ->sort('timestamp', 'DESC')
    ->sort('record_id', 'DESC')
    ->range(0, 1)
    ->execute();

  if (!empty($result)) {
    return entity_load('monitoring_sensor_result', reset($result));
  }

  return NULL;
}

/**
 * Implements hook_views_pre_render().
 *
 * Alters the views page title.
 */
//function monitoring_views_pre_render(View $view) {
//  if ($view->name == 'monitoring_sensor_results' && !empty($view->args)) {
//    $view->build_info['title'] = monitoring_sensor_action_title('log', monitoring_sensor_info_load($view->args[0]));
//  }
//}

/**
 * Implements hook_theme().
 */
function monitoring_theme() {
  return array(
    'monitoring_config_box' => array(
      'variables' => array(
        'title' => NULL,
        'description' => NULL,
        'code' => NULL,
        'code_height' => NULL,
      ),
    ),
    'monitoring_overview_summary' => array(
      'variables' => array(
        'status_overview'           => array(),
        'total_execution_time'      => NULL,
        'non_cached_execution_time' => NULL,
        'oldest_sensor_label'       => NULL,
        'oldest_sensor_category'       => NULL,
        'oldest_sensor_called_before' => NULL,
      ),
    ),
  );
}

/**
 * Monitoring config code box theme.
 *
 * @param array $variables
 *   Theme variables.
 *
 * @return string
 *   Formatted output.
 */
function theme_monitoring_config_box($variables) {
  $output = '';

  if (!empty($variables['title'])) {
    $output .= '<h3>' . check_plain($variables['title']) . '</h3>';
  }

  if (!empty($variables['description'])) {
    $output .= '<p>' . check_plain($variables['description']) . '</p>';
  }

  if (!empty($variables['code'])) {
    $variables['code_height'] = !empty($variables['code_height']) ? $variables['code_height'] : '100';
    $output .= '<pre style="border:1px solid silver;padding:4px;height:' . $variables['code_height'] . 'px;overflow:auto;">' . check_plain($variables['code']) . '</pre>';
  }

  return $output;
}

/**
 * Get config code with dynamic variables.
 *
 * @param string $module
 *   Module name.
 * @param string $type
 *   Config type.
 * @param array $variables
 *   Dynamic values.
 *
 * @return string
 *   Config code.
 */
function monitoring_config_code($module, $type, $variables = array()) {
  $code = file_get_contents(drupal_get_path('module', $module) . '/config_tpl/' . $type . '.txt');
  return String::format($code, $variables);
}

/**
 * Monitoring overview page summary.
 *
 * @param array $variables
 *   Theme variables.
 *
 * @return string
 *   Formatted output.
 */
function theme_monitoring_overview_summary($variables) {
  $output = '<div class="monitoring-overview-summary">';
  $output .= t('<span class="monitoring-summary-time">Request execution time: <strong>@time_non_cachedms</strong> (including cached <strong>@time_totalms</strong>)</span>, <span class="monitoring-summary-ok">&nbsp;</span> @ok OK, <span class="monitoring-summary-info">&nbsp;</span> @info Info, <span class="monitoring-summary-warning">&nbsp;</span> @warning Warning, <span class="monitoring-summary-critical">&nbsp;</span> @critical Critical, <span class="monitoring-summary-unknown">&nbsp;</span> @unknown Unknown',
    array(
      '@time_total' => $variables['total_execution_time'],
      '@time_non_cached' => $variables['non_cached_execution_time'],
      '@ok' => $variables['status_overview'][SensorResultInterface::STATUS_OK],
      '@info' => $variables['status_overview'][SensorResultInterface::STATUS_INFO],
      '@warning' => $variables['status_overview'][SensorResultInterface::STATUS_WARNING],
      '@critical' => $variables['status_overview'][SensorResultInterface::STATUS_CRITICAL],
      '@unknown' => $variables['status_overview'][SensorResultInterface::STATUS_UNKNOWN],
    ));
  $output .= '</div>';
  if (\Drupal::currentUser()->hasPermission('monitoring force run')) {
    $output .= '<div class="monitoring-overview-summary-actions-right">' . l(t('Force execute all'), 'monitoring/sensors/force') . '</div>';
  }
  if (!empty($variables['oldest_sensor_label'])) {
    $output .= '<div class="monitoring-overview-summary-actions-right">' . t('Sensor %sensor (%category) cached before %before.', array('%sensor' => $variables['oldest_sensor_label'], '%before' => $variables['oldest_sensor_called_before'], '%category' => $variables['oldest_sensor_category'])) . '</div>';
  }
  else {
    $output .= '<div class="monitoring-overview-summary-actions-right">' . t('No sensor cached.') . '</div>';
  }
  return $output;
}

/**
 * Gets current site host.
 *
 * @return string
 *   Site url.
 */
function monitoring_host() {
  global $base_url;
  return preg_replace('/^http(s)?:\/\//', '', $base_url);
}

function monitoring_host_key() {
  return str_replace('.', '_', monitoring_host());
}

/**
 * Submit callback to clear the disappeared sensors list.
 *
 * @see \Drupal\monitoring\Sensor\Sensors\SensorDisappearedSensors::settingsForm()
 */
function monitoring_clear_missing_sensor_submit($form, &$form_state) {
  $available_sensors = array();
  foreach (monitoring_sensor_info() as $key => $info) {
    $available_sensors[$key] = array(
      'name' => $key,
      'label' => $info->getLabel(),
      'enabled' => $info->isEnabled(),
    );
  }
  \Drupal::state()->set('monitoring.available_sensors', $available_sensors);
  drupal_set_message(t('All missing sensors have been cleared.'));
}

/**
 * Implements hook_modules_installed().
 *
 * Installing modules can change the available sensors, reset the cache to make
 * sure that the list is up to date.
 */
function monitoring_modules_installed($modules) {
  // Don't do anything if we're currently syncing.
  if (\Drupal::service('config.installer')->isSyncing()) {
    return;
  }

  if (in_array('monitoring', $modules)) {
    // If modules is in the list of new modules to install, look for optional
    // configuration in all modules, including those that are already installed.
    $modules = array();
    foreach (\Drupal::moduleHandler()->getModuleList() as $extension) {
      $modules[] = $extension->getName();
    }
  }

  $old_state = \Drupal::configFactory()->getOverrideState();
  \Drupal::configFactory()->setOverrideState(FALSE);

  // Loop over all installed modules and in each of them, look for optional
  // configuration to install.
  foreach (\Drupal::moduleHandler()->getModuleList() as $extension) {
    monitoring_install_optional_configuration($modules, $extension);
  }

  \Drupal::configFactory()->setOverrideState($old_state);
}

/**
 * Installs optional configuration for a module.
 *
 * @param array $modules
 *   List of new modules.
 * @param \Drupal\Core\Extension\Extension $extension
 *   Extension object for a module to look for configuration to install.
 */
function monitoring_install_optional_configuration($modules, Extension $extension) {
  $active_store = \Drupal::service('config.storage');
  foreach ($modules as $module) {
    $path = $extension->getPath() . '/config/optional/' . $module;
    if (file_exists($path)) {
      $source_storage = new FileStorage($path);

      $config_to_install = $source_storage->listAll();
      $data = $source_storage->readMultiple($config_to_install);
      $config_to_install = array_diff($config_to_install, \Drupal::service('config.storage')->listAll());

      foreach ($config_to_install as $name) {
        $new_config = new Config($name, $active_store, \Drupal::service('event_dispatcher'), \Drupal::service('config.typed'));
        if ($data[$name] !== FALSE) {
          $new_config->setData($data[$name]);
        }
        if ($entity_type = \Drupal::service('config.manager')->getEntityTypeIdByName($name)) {
          \Drupal::entityManager()
            ->getStorage($entity_type)
            ->create($new_config->get())
            ->save();
        }
        else {
          $new_config->save();
        }
      }
    }
  }
}

/**
 * Gets available value types definitions.
 *
 * @return array
 *   Value type definitions, consisting of a label and an optional
 *   formatter_callback.
 */
function monitoring_value_types() {
  // @todo Allow extension of those types throgh a hook or plugin system.
  return array(
    'time_interval' => array(
      'label' => 'Seconds',
      'formatter_callback' => 'monitoring_value_label_callback_interval',
    ),
    'bool' => array(
      'label' => 'Status',
      'formatter_callback' => 'monitoring_value_label_callback_bool',
    ),
    'commerce_currency' => array(
      'label' => 'Commerce currency',
      'formatter_callback' => 'monitoring_value_label_callback_commerce_currency',
    ),
  );
}

/**
 * Formatter for time interval value.
 *
 * @param \Drupal\monitoring\Result\SensorResultInterface $result
 *   Result object for which to get the formatted value.
 *
 * @return string
 *   Formatted time interval.
 *
 * @see \Drupal::service('date.formatter')->formatInterval()
 */
function monitoring_value_label_callback_interval(SensorResultInterface $result) {
  return \Drupal::service('date.formatter')->formatInterval($result->getValue());
}

/**
 * Formatter for boolean value (TRUE, FALSE).
 *
 * @param \Drupal\monitoring\Result\SensorResultInterface $result
 *   Result object for which to get the formatted value.
 *
 * @return string
 *   TRUE or FALSE strings.
 */
function monitoring_value_label_callback_bool(SensorResultInterface $result) {
  return $result->getValue() ? 'TRUE' : 'FALSE';
}

/**
 * Formatter for commerce currency amount value.
 *
 * @param \Drupal\monitoring\Result\SensorResultInterface $result
 *   Result object for which to get the formatted value.
 *
 * @return string
 *   Formatted amount.
 *
 * @see commerce_default_currency()
 * @see commerce_currency_format()
 */
function monitoring_value_label_callback_commerce_currency(SensorResultInterface $result) {
  if (\Drupal::moduleHandler()->moduleExists('commerce')) {
    $currency = $result->getSensorInfo()->getSetting('currency_code');
    if (empty($currency)) {
      $currency = commerce_default_currency();
    }
    // commerce_currency_format() uses @placeholders and runs the price through
    // check_plain(), that can cause double encoding, so decode entities again.
    return html_entity_decode(commerce_currency_format($result->getValue(), $currency, NULL, FALSE), ENT_QUOTES);
  }

  return $result->getValue();
}

/**
 * Ajax callback for threshold sensors settings form.
 */
function monitoring_sensor_thresholds_ajax($form, &$form_state) {
  return $form[$form_state['sensor']->getSensorName()]['thresholds'];
}

/*
 * Implements hook_node_type_insert().
 *
 * Inserts new node sensor config entities on creation of new node types.
 */
function monitoring_node_type_insert(NodeTypeInterface $type) {
  $sensor = SensorInfo::create(array(
    'id' => 'node_new_' . $type->id(),
    'label' => String::format('New @type nodes', array('@type' => $type->label())),
    'description' => String::format('New nodes of type @type', array('@type' => $type->label())),
    'sensor_id' => 'entity_aggregator',
    'value_label' => String::format('@type nodes', array('@type' => $type->label())),
    'category' => 'Content',
    'status' => FALSE,
    'caching_time' => 600,
    'settings' => array(
      'thresholds' => array(
        'type' => 'falls',
      ),
      'entity_type' => 'node',
      'conditions' => array(
        array('field' => 'type', 'value' => $type->id()),
      ),
      'time_interval_field' => 'created',
      'time_interval_value' => 60 * 60 * 24,
    ),
  ));
  $sensor->save();
}

/*
 * Implements hook_node_type_delete().
 *
 * Deletes node sensor config entities on deletion of node types.
 */
function monitoring_node_type_delete(NodeTypeInterface $info) {
  $config_id = 'node_new_' . $info->id();
  $sensor = SensorInfo::load($config_id);
  $sensor->delete();
}

/*
 * Implements hook_node_type_update().
 *
 * Updates node sensor config entities on update of node types.
 */
function monitoring_node_type_update(NodeTypeInterface $type) {
  $config_id = 'node_new_' . $type->id();
  $sensor = SensorInfo::load($config_id);
  if ($sensor) {
    $sensor->id = 'node_new_' . $type->id();
    $sensor->label = String::format(
      'New @type nodes',
      array('@type' => $type->label())
    );
    $sensor->description = String::format(
      'New nodes of type @type',
      array('@type' => $type->label())
    );
    $sensor->value_label = String::format(
      '@type nodes',
      array('@type' => $type->label())
    );
    $sensor->settings['conditions'][0]['value'] = $type->id();
    $sensor->save();
  }
}

/*
 * Implements hook_search_api_index_insert().
 *
 * Inserts new search api index  sensor config entities on creation of new search api index.
 */
function monitoring_search_api_index_insert($info) {
  $sensor = SensorInfo::create(array(
    'id' => 'search_api_' . $info->machine_name,
    'label' => String::format('Search index queue size of @index', array('@index' => $info->name)),
    'sensor_id' => 'search_api_unindexed',
    'value_label' => 'Unindexed items',
    'category' => 'Search API',
    'caching_time' => 900,
    'status' => TRUE,
    'settings' => array(
      'index_id' => $info->id(),
    ),
  ));
  $sensor->save();
}

/*
 * Implements hook_search_api_index_delete().
 *
 * Deletes search api index sensor config entities on deletion of search api index.
 */
function monitoring_search_api_index_delete($info) {
  $config_id = 'search_api_' . $info->machine_name;
  $sensor = SensorInfo::load($config_id);
  $sensor->delete();
}

/*
 * Implements hook_search_api_index_update().
 *
 * Updates search api index sensor config entities on updation of search api index.
 */
function monitoring_search_api_index_update($info) {
  $config_id = 'search_api_' . $info->machine_name;
  $sensor = SensorInfo::load($config_id);
  $sensor->id = 'search_api_' . $info->machine_name;
  $sensor->label = String::format('Search index queue size of @index', array('@index' => $info->name));
  $sensor->save();
}
